Here I am going to write down and organise my thoughts for the referencing of entries/nodes.

I want to have a way to "resolve a reference". That is, to transform a general reference into a specific reference. The general one can contain stuff like search results and '&&' symbols but the specific reference must refer to one node or one set of nodes that have been confirmed to exist.

So, I need:
- References for single nodes
- References for multiple nodes (can be nested)
- References for specific unchanging nodes
- References for dynamically changing nodes that must be resolved
- An algorithm for resolving a dynamic node reference into a static node reference
- A null node for dynamic references that cannot be resolved
- The ability to filter groups of nodes (by any information contained in the nodes)
- A formal syntax for doing it all

- Referencing already existing dynamically generated nodes
- Supply one node and if it doesn't exist then use the next one (e.g. node_1 && node_2 goes to node_1 if node_1 exists and node_2 otherwise)

There are two types of reference: single references and lists of references. 

Groups of references need:
- Order? Yes, it is required.
- No duplicates? No, not allowing duplicates would serve no purpose.
- Anything else? Can't think of anything.

So I think I should use lists for groups of references. 


I could use the python notation and syntax for referencing. 

e.g. 'search(search_term, since("Jan 1"))' would return all entries since January 1 which contain the search term. I could also have search functions that change the ordering depending on relevance of particular entries. 

I could build up long strings of function calls like this. I could also include one function or variable for the null node. I could reference temporary nodes with something like temp(...) and I could reference nodes by id with id(...) and I could reference them by position with range(...) and so on and so forth. I'll have to make sure I don't have any collisions with existing python functions though. 

I think this is a really good idea and it will help me to learn the python language too. 


I am going to have one class called NodeRef (or similar). It is created with a string containing something like: 'search(search_term, since("Jan 1"))'. It will have a method called resolve() which uses the initial creation string to generate a list of nodes. The list can have zero or more nodes in it. I don't think I need to limit myself to having a NodeRef class for single references. I can easily add the functionality into the one main NodeRef class. For example I could have another method called extract_single(). It would simply return the head of the list or null if the list is empty. 


I'm going to write down all the ways in which I might want to populate the initial list (before filtering and stuff). Also, I could use python list comprehension as well. 
- id()
- timestamp()
- date_range()
- range() (the slice notation that I'm currently using)
- last_entry()
- first_entry_containing() (the first entry containing the search term or tag)
- tmp() (for referencing dynamically generated nodes that have already been generated)


I think I would like some of these methods to be able to give additional information to the nodes they are activated on. For example the search function could give the search string to the nodes it accepts so that they can highlight it.
