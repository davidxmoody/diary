#!/usr/bin/env python3
# Script for finding the names of diary entries.

# Should be able to return filenames corresponding to specific timestamps, 
# ranges of entries, single entries and new entries (with a given date). 

import os
import math
import datetime
import time
import argparse

# Load constants that have previously been sourced and exported in bash.
# TODO: change this to use a better way to store and load them. 
dir_entries = os.environ['dir_entries']
device_name = os.environ['device_name']

def new_entry_filename(created_on=None, device_name=device_name):
    '''Return the full path of a new (not currently existing) entry.
    
    Note that the directory structure may not exist.'''

    if created_on==None: created_on = datetime.datetime.now()
    timestamp = int(math.floor(time.mktime(created_on.timetuple())))

    filename = 'diary-{}-{}.txt'.format(timestamp, device_name)
    month = '{}-{}'.format(created_on.year, created_on.month)
    path = os.path.realpath(os.path.join(dir_entries, month, filename))

    return path

def find_by_timestamp(timestamp):
    pass


# TODO: function to get entries from entry(s) "descriptor".

# TODO: process all command line arguments, make compatible with previous 
#       bash version of the script. 


class QueueAction(argparse.Action):
    '''Appends (dest, arguments) pairs to 'queue' in the returned Namespace.'''
    def __call__(self, parser, namespace, value, option_string=None):
        if not hasattr(namespace, 'queue'): 
            namespace.queue = []
        namespace.queue.append( (self.dest, value) )

parser = argparse.ArgumentParser(description='Get entry filenames.')

parser.add_argument('-n', '--new', nargs='?', type=int, 
                    dest='new', help='', 
                    action=QueueAction, default=argparse.SUPPRESS)

# TODO add custom type to check it is a correct range
parser.add_argument('-r', '--range', 
                    dest='range', help='',
                    action=QueueAction, default=argparse.SUPPRESS)
                    
parser.add_argument('-t', '--timestamp', type=int,
                    dest='timestamp', help='',
                    action=QueueAction, default=argparse.SUPPRESS)

args = parser.parse_args()

print(args)

for func_name, value in args.queue:
    print(func_name, value)
